---
title: "0.3 Data structures"
format:
   html:
    toc: true
    toc-depth: 2
    number-sections: true
    code-block-bg: true
    code-block-border-left: true
---

# A short introduction on Data structures

You don't have to search for long to see different ways of organizing data in real life situations. Standing in line at the cafeteria, picking the winner in a March Madness bracket, writing down a shopping list, etc. All these examples allow us to use a certain resource in a manner that makes life somewhat easier. Computer Science, as a field, borrows a lot of these ideas in organizing data. The way that a programmer views and organizes the data that his/her program is using has bearing on the success/failure of multiple algorithms. Whereas the primitive types (int, float, double, long, char, byte, short, boolean) are adequate for simple programs, most programs you’ll be writing deal with large amounts of complicated and related data. In order to deal with such data, some structures have been used to represent this data and its relationships.
{{< pagebreak >}}
Some data structures are based on how the programmer organizes the data i.e. how it is organized in memory. These structures are typically used as the basic building blocks of other structures. It is important to remember that with these structures, the implementation of the organization is what is important...more important than what kind of data is being organized, or when that data was encountered and/or organized.

- Arrays are the most basic. Recall from the Living with Cyber classes, that arrays are used to store similar data in contiguous memory locations. They are available in almost all programming languages and data is accessed using its relative position (i.e. index)

- Linked Lists are also used to store elements in a sequence. However, the data is stored in nodes. Each node has one piece of data, as well as a link showing the location of the next node in the sequence. Think of a chain link. 
{{< pagebreak >}}
These two basic structures are the building blocks of the other category of data structures i.e. those that are based on how the programmer views the data. Because these structures are based on how data is viewed (as opposed to how they are organized), sometimes these are called Abstract Data Types (remember “abstract” as a term refers to interpretation separate from concrete reality). These data structures are therefore independent of the implementation which is a concept that can be a little confusing the first time you hear about it.

- Stacks are data structures that arrange data based on when that data was
encountered. In this case, the last in is also the first out (LIFO). Compare this to a
stack of plates at Tech Table. This way of looking at a data structure has nothing o do with how it is implemented. It could be an array or linked list (behind the scenes). As long as the data structure works in a LIFO manner, then it can be called a stack.

- Queues also arrange data based on when it was encountered but in a First In, First Out (FIFO) manner. Compare this to an orderly line to get your school identity card. Any piece of data removed from a queue is the piece of data that has been in the queue the longest.

- List is just a linear arrangement of data. It could be an array or linked list (behind the scenes) but as long as it supports the arrangement of data in a linear manner, it can be referred to as a list. Sometimes lists can also be sorted.

- Maps (a.k.a dictionaries, tables, associative arrays) are used to store key-value pairs. They allow the user quick access to a value when provided with the key. Compare it to your phone address book which hopefully provides you with a value (phone number, address, and message history) for every key (contact name) that you provide. Keys should be unique and each key should map to a single value.

- Trees are non-linear data structures. Data arranged in a tree stores both the value and some kind of relationship between those values. The restriction in trees is that each node is capable of having multiple successor nodes, but only one parent node. The parent of all nodes (without a parent itself) is called the root. Think about a tournament bracket.

- Graphs are also non-linear data structures but with less restrictions on the intra node relationships. Any node (typically called a vertex) can be connected (through an edge) to any other vertex. Sometimes even the edges have weights associated with them. Think road or airline routes.

{{< pagebreak >}}




There are some basic definitions we need to get out of the way before we dive into more complicated stuff.

**Type**: a collection of values. For example, a boolean type is collection of two values – true and false. A simple type (such as boolean or integer) will not have subparts, whereas an aggregate or composite type will contain several pieces of information.

**Data item**: a data item is a member of the type i.e. a piece of information derived from a type.

**Data type**: This is a combination of a type (the values) and the operations that can be applied to that  type. For example, given the possible values of an integer (-231 – 231 -1), possible operations include addition, subtraction, division, etc. 

There is a difference between the logical concept of a data type and its physical implementation (even if the line is blurred). Consider an array: Its logical concept is that of potentially homogeneous data items stored in a collection where each item is accessed using an index number. However, its physical implementation is a block of contiguous memory locations. The distinction between the two needs to be made because there are cases where arrays (particularly multi-dimensional arrays) have been designed with the same logical idea, but different physical implementation (i.e. the data items are not in contiguous memory locations) but that doesn’t make them any less of an array than a typical array. Another example is the list. Its logical concept is a collection of items, but its physical implementation could be either an array or a linked list. Both are lists, but they have very different physical implementations.

**Abstract data type**: When the idea of a data type is realized as a software component i.e. the type and operations are realized in code. This is typically represented by an interface. It does NOT specify how the data type is implemented. In fact, such details are typically hidden from the user of the data type or any outside access.

**Data structure**: The complete implementation of an ADT. It typically takes the form of a class where the operations of the ADT are captured by member functions of that class.

An integer as well as the operations that an integer can be put through make up the integer data type. The java int variable is a physical representation of the abstract integer. This variable, alongside the java int operations make up an ADT. But there is difference between the two (i.e. a difference between a java int ADT and the abstract integer). The java int ADT can only support values within a certain range and we know that real integers do not have that limitation. If this limitation is a deal breaker for you, then you will have to figure out a different ADT (with different implementations) to represent your integers.                            


Ref:

A Practical Introduction to Data Structures and Algorithm Analysis, Clifford A. Shaffer ; 
Object Oriented Data Structures using Java (4th Edition). Nell Dale, Daniel T. Joyce, Chip Weems.


